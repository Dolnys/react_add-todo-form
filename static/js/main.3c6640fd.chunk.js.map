{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","completed","title","userId","TodoList","todos","map","username","getUserById","usersFromServer","find","App","useState","setTitle","todosFromServer","tasks","setTasks","selectedUserId","setselectedUserId","formSubmitted","setFormSubmitted","todosWithUsers","action","method","onSubmit","event","listOfTasks","preventDefault","length","push","Math","max","task","type","placeholder","onChange","target","value","replace","trim","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c6640fd.chunk.js","sourcesContent":["import { User } from '../../types';\n\ntype UserProps = {\n  user: User;\n};\n\nexport const UserInfo = ({ user }: UserProps) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport { Todo } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\ninterface TodoInfoProps {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={`TodoInfo ${todo.completed ? 'TodoInfo--completed' : ''}`}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n      {todo.user && <UserInfo user={todo.user} key={todo.userId} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { Todo, User } from './types';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(userId: number): User | null {\n  return usersFromServer.find((user) => user.id === userId) ?? null;\n}\n\nexport const App = () => {\n  const [title, setTitle] = useState<string>('');\n  const [tasks, setTasks] = useState<Todo[]>(todosFromServer);\n  const [selectedUserId, setselectedUserId] = useState<number>(0);\n  const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, ''));\n  };\n\n  const newTaskId = (listOfTasks: Todo[]) => {\n    const newId\n    = Math.max(...listOfTasks.map((task) => task.id), 0);\n\n    return newId + 1;\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setFormSubmitted(true);\n\n    if (title.length !== 0 && selectedUserId) {\n      tasks.push({\n        id: newTaskId(tasks),\n        title,\n        completed: false,\n        userId: selectedUserId,\n        user: null,\n      });\n\n      setTasks([...tasks]);\n      setTitle('');\n      setselectedUserId(0);\n      setFormSubmitted(false);\n    }\n  };\n\n  const todosWithUsers = tasks.map((todo) => ({\n    ...todo,\n    user: getUserById(todo.userId),\n  }));\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              onChange={handleTitleChange}\n              value={title}\n            />\n          </label>\n          {formSubmitted && title.trim() === '' && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUserId}\n// eslint-disable-next-line\nonChange={(event) => setselectedUserId(Number(event.target.value))}\n            >\n              <option value=\"0\" disabled>\n                Choose a user\n              </option>\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {formSubmitted && !selectedUserId && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <div className=\"App\">\n        <TodoList todos={todosWithUsers} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}